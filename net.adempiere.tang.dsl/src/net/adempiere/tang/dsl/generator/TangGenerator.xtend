/*
 * generated by Xtext 2.12.0
 */
package net.adempiere.tang.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import net.adempiere.tang.dsl.tang.TangEntity
import net.adempiere.tang.dsl.tang.TangPackageDeclaration
import com.google.inject.Inject
import org.eclipse.xtext.naming.IQualifiedNameProvider
import net.adempiere.tang.dsl.tang.Field
import net.adempiere.tang.dsl.tang.TangType

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TangGenerator extends AbstractGenerator {

@Inject extension IQualifiedNameProvider

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		//+01) Generate tiny documentation.
		fsa.generateFile('all-entities.txt', 'Entities in our System: ' + 
			resource.allContents
				.filter(TangEntity)
				.map[name]
				.join(', '))

		//+02) Generate Java Beans(JPA Entities)
		for (tangPackage : resource.allContents.toIterable.filter(TangPackageDeclaration)) {
			for (entity : tangPackage.elements.filter(TangEntity)) {
				fsa.generateFile(
//					tangPackage.name + '/' + entity.name +'.java'
					entity.fullyQualifiedName.toString("/") + ".java"
//					, "public class "+entity.name + " { }"
					, entity.generateJavaClass
				)
			}
		}

		//-03) Generate XML file with DB Migration(Liquibase)
		
	}

	def generateJavaClass(TangEntity entity) {
		'''
		«IF entity.eContainer.fullyQualifiedName !== null»
		package «entity.eContainer.fullyQualifiedName»;
		
		«ENDIF»
		public class «entity.name» «IF entity.superEntity !== null»extends «entity.superEntity.fullyQualifiedName» «ENDIF»{
		
		«FOR f: entity.fields»
			«f.generateJavaField»
		«ENDFOR»
		}
		'''
	}

	def generateJavaField(Field f) {
		'''
		
		//private «f.fieldType.fullyQualifiedName» «f.name»;
		private «f.fieldType.name» «f.name»;

		public «f.fieldType.name» get«f.name.toFirstUpper»() {
			return «f.name»;
		}

		public void set«f.name.toFirstUpper»(«f.fieldType.name» «f.name») {
			this.«f.name» = «f.name»;
		}
		'''
	}

	def getFieldType(TangType tangType) {
//		if (tangType) {
			
//		}
	}
}
