grammar net.adempiere.tang.dsl.Tang with org.eclipse.xtext.common.Terminals
//grammar net.adempiere.tang.dsl.Tang with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate tang "http://www.adempiere.net/tang/dsl/Tang"

// ******************************************************************
// *** Documentation
// *** - Cardinalities (?= optional, *= any number, += at least once)
// ******************************************************************

/*
 * TODO
 * domain(vendor)-name...: net.adempiere
 * application-name......: product
 * application-version...: 1.0.0
 */

TangModule:
/*
	tangTypes+=TangType*
	tangDefaultValueCalculators+=TangDefaultValueCalculator*

	tangEntities+=TangEntity*
	tangEntityViews+=TangEntityView*
*/
//	(tangDefaultValueCalculatorList=TangDefaultValueCalculatorList)?
//	(tangModelElements+=TangAbstractElement)*
	(tangPackages+=TangPackageDeclaration)*
;

// @Trifon
terminal OPEN: '{';
terminal CLOSE: '}';

//terminal LONG returns ecore::ELong: ('-'|'+')? ('0'..'9')+ 'l';
// @Trifon
terminal LONG_OBJECT returns ecore::ELongObject: ('-'|'+')? ('0'..'9')+ 'L';

@Override
terminal INT returns ecore::EInt: ('-'|'+')? ('0'..'9')+;
// @Trifon
terminal INTEGER returns ecore::EIntegerObject: ('-'|'+')? ('0'..'9')+ 'i';

// @Trifon
terminal BOOLEAN returns ecore::EBoolean: ('true'|'false');
terminal BOOLEAN_OBJECT returns ecore::EBooleanObject: ('Boolean.TRUE'|'Boolean.FALSE');
// @Trifon - TODO - how to add |'Boolean.TRUE'|'Boolean.FALSE'
//terminal BOOLEAN_DEFAULT_VALUES returns ecore::EBoolean: ('true'|'false');

TangPackageDeclaration:
	'package' name=QualifiedName OPEN
		imports+=TangImport*
		defaultValueCalculatorList=TangDefaultValueCalculatorList?
		elements+=TangAbstractElement*
	CLOSE
;

TangAbstractElement: // By this way order of Model.tangModelElements will not matter!
//	TangPackageDeclaration // We will not support embedding of packages!

//	TangType
//	| TangAbstractEntity
	TangAbstractType

	| TangWindow
;

TangAbstractType:
	TangType | TangAbstractEntity
;

TangAbstractEntity:
	TangEntity | TangEntityViewNative | TangEntityView
;

QualifiedName: // When importing grammar: org.eclipse.xtext.xbase.Xbase
	ID ('.' ID)*
//	ValidID ('.' ValidID)*
;
QualifiedNameWithWildcard: // When importing grammar: org.eclipse.xtext.xbase.Xbase
	QualifiedName '.*'? // old: ?
;
TangImport:
	'import' importedNamespace=QualifiedNameWithWildcard ';'
;

TangType:
	BasicType | SubType
;

BasicType:
	BasicStringType 
	| BasicIntegerType | BasicLongType | BasicDecimalType 
	| BasicBooleanType 
	| BasicDateType | BasicTimeType | BasicDateTimeType
;
SubType:
	SubStringType 
	| SubIntegerType | SubLongType | SubDecimalType
	| SubBooleanType 
	| SubDateType | SubTimeType | SubDateTimeType
;


BasicStringType:
	'string-type' name=ID
	OPEN
		'java-type' '=' javaType=STRING
		'db-type' '=' dbType=STRING
		'max-length' '=' maxLength=INT 
		('allow-null' '=' allowNull=BOOLEAN) //  '=' ('true' | 'false')
		('default-value' '=' defaultValue=STRING)?
	CLOSE
;
SubStringType:
	'sub-string-type' name=ID 'extends' superType=[BasicStringType|QualifiedName]
	OPEN
		('max-length' '=' maxLength=INT)?
		('allow-null' '=' allowNull=BOOLEAN)?
		('default-value' '=' defaultValue=STRING)?
	CLOSE
;

BasicIntegerType:
	'integer-type' name=ID
	OPEN
		'java-type' '=' javaType=STRING
		'db-type' '=' dbType=STRING
		'max-digits' '=' maxLength=INT 
		('allow-null' '=' allowNull=BOOLEAN)
		('min-value' '=' minValue=INT)? // TODO - Allow user to enter CONSTANT --> 'Integer.MIN_VALUE'|'Integer.MAX_VALUE'|
		('max-value' '=' maxValue=INT)? // TODO - Allow user to enter CONSTANT --> 'Integer.MIN_VALUE'|'Integer.MAX_VALUE'|
		('default-value' '=' defaultValue=INT)?
	CLOSE
;
SubIntegerType:
	'sub-integer-type' name=ID 'extends' superType=[BasicIntegerType|QualifiedName]
	OPEN
		('max-digits' '=' maxDigits=INT)? 
		('allow-null' '=' allowNull=BOOLEAN)?
		('min-value' '=' minValue=INT)? // TODO - Allow user to enter CONSTANT --> 'Integer.MIN_VALUE'|'Integer.MAX_VALUE'|
		('max-value' '=' maxValue=INT)? // TODO - Allow user to enter CONSTANT --> 'Integer.MIN_VALUE'|'Integer.MAX_VALUE'|
		('default-value' '=' defaultValue=INT)?
	CLOSE
;

BasicLongType:
	'long-type' name=ID
	OPEN
		'java-type' '=' javaType=STRING
		'db-type' '=' dbType=STRING
		'max-digits' '=' maxLength=INT 
		('allow-null' '=' allowNull=BOOLEAN)
		('min-value' '=' minValue=LONG_OBJECT)?
		('max-value' '=' maxValue=LONG_OBJECT)?
		('default-value' '=' defaultValue=LONG_OBJECT)?
	CLOSE
;
SubLongType:
	'sub-long-type' name=ID 'extends' superType=[BasicLongType|QualifiedName]
	OPEN
		('max-digits' '=' maxDigits=INT)? 
		('allow-null' '=' allowNull=BOOLEAN)?
		('min-value' '=' minValue=LONG_OBJECT)?
		('max-value' '=' maxValue=LONG_OBJECT)?
		('default-value' '=' defaultValue=LONG_OBJECT)?
	CLOSE
;

BasicBooleanType:
	'boolean-type' name=ID
	OPEN
		'java-type' '=' javaType=STRING
		'db-type' '=' dbType=STRING
		('allow-null' '=' allowNull=BOOLEAN)
		('default-value' '=' defaultValue=BOOLEAN)?
	CLOSE
;
SubBooleanType:
	'sub-boolean-type' name=ID 'extends' superType=[BasicBooleanType|QualifiedName]
	OPEN
		('allow-null' '=' allowNull=BOOLEAN)?
		('default-value' '=' defaultValue=BOOLEAN)?
	CLOSE
;

BasicDecimalType:
	'decimal-type' name=ID
	OPEN
		'java-type' '=' javaType=STRING
		'db-type' '=' dbType=STRING
		'max-digits' '=' maxDigits=INT 
		('allow-null' '=' allowNull=BOOLEAN)
		('min-value' '=' minValue=INT)?
		('max-value' '=' maxValue=INT)?
		('default-value' '=' defaultValue=INT)?
	CLOSE
;
SubDecimalType:
	'sub-decimal-type' name=ID 'extends' superType=[BasicDecimalType|QualifiedName]
	OPEN
		('max-digits' '=' maxDigits=INT)? 
		('allow-null' '=' allowNull=BOOLEAN)?
		('min-value' '=' minValue=INT)?
		('max-value' '=' maxValue=INT)?
		('default-value' '=' defaultValue=INT)?
	CLOSE
;

BasicDateType:
	'date-type' name=ID
	OPEN
		'java-type' '=' javaType=STRING
		'db-type' '=' dbType=STRING
		('allow-null' '=' allowNull=BOOLEAN)
		('default-value' '=' defaultValue=STRING)?
	CLOSE
;
SubDateType:
	'sub-date-type' name=ID 'extends' superType=[BasicDateType|QualifiedName]
	OPEN
		('allow-null' '=' allowNull=BOOLEAN)?
		('default-value' '=' defaultValue=STRING)?
	CLOSE
;

BasicTimeType:
	'time-type' name=ID
	OPEN
		'java-type' '=' javaType=STRING
		'db-type' '=' dbType=STRING
		('allow-null' '=' allowNull=BOOLEAN)
		('default-value' '=' defaultValue=STRING)?
	CLOSE
;
SubTimeType:
	'sub-time-type' name=ID 'extends' superType=[BasicTimeType|QualifiedName]
	OPEN
		('allow-null' '=' allowNull=BOOLEAN)?
		('default-value' '=' defaultValue=STRING)?
	CLOSE
;

BasicDateTimeType:
	'date-time-type' name=ID
	OPEN
		'java-type' '=' javaType=STRING
		'db-type' '=' dbType=STRING
		('allow-null' '=' allowNull=BOOLEAN)
		('default-value' '=' defaultValue=STRING)?
	CLOSE
;
SubDateTimeType:
	'sub-date-time-type' name=ID 'extends' superType=[BasicDateTimeType|QualifiedName]
	OPEN
		(allowNull?='allow-null')? // TODO -decide this syntax or ('allow-null' '=' allowNull=BOOLEAN)?
		('default-value' '=' defaultValue=STRING)?
	CLOSE
;


//------- Entities
TangEntity:
	'entity' name=ID 
	'db-table-name' '=' tableName=TableOrViewName
	('extends' superEntity=[TangEntity|QualifiedName])? 
	OPEN
		fields+=Field*   // *=0..Many; +=1..Many // TODO - Decide if entity with 0 fields will be valid? If entity extends another Entity then it must be valid!
		// Maybe if current entity extends other entity then it can have 0 fields!!!

		primaryKey=PrimaryKey? // TODO - Allow 0 primary key def. if super Entity has primary Key!!!
		uniqueCombinations+=UniqueCombination*
		tableIndexes+=DBTableIndex*
		entityFinders=EntityFinders?
	CLOSE
;

TableOrViewName:
	STRING // TODO - proper DB Table name
;

PrimaryKey:
	'primary-key' name=ID
	OPEN
	  fields+=[Field] (',' fields+=[Field])*
	CLOSE // ]+ 1..MANY
;

UniqueCombination:
	'unique-combination' name=ID
	OPEN
		fields+=[Field] (',' fields+=[Field])*
	CLOSE // ]+ 1..MANY
;

DBTableIndex: // TODO: Specify type of DB Index.
	'db-index' name=ID
	OPEN
		fields+=[Field] (',' fields+=[Field])*
	CLOSE // ]+ 1..MANY
;

EntityFinders:
	'finders'
	OPEN
		finders+=AbstractEntityFinder+
	CLOSE // ]+ 1..MANY
;
AbstractEntityFinder:
	EntityFinder | CollectionEntityFinder
;
EntityFinderParameter:
//	name=ID ':' type=[Field|QualifiedName]
	type=[Field|QualifiedName]
;
EntityFinder:
	type=[TangAbstractType] name=ID '(' parameters+=EntityFinderParameter (',' parameters+=EntityFinderParameter)* ')' ';'
;
CollectionEntityFinder:
	('List'|'Set'|'Collection') '<' type=[TangAbstractType] '>' name=ID '(' parameters+=EntityFinderParameter (',' parameters+=EntityFinderParameter)* ')' ';'
;

Field:
//	fieldType=[TangType] name=ID // old version
	name=ID ':' fieldType=[TangAbstractType] // old: fieldType=[TangType]
	'db-column-name' '=' columnName=STRING
	('allow-null' '=' allowNull=BOOLEAN)? //TODO - Can be used only if type is TangType!!!
	defaultCalculationMethod=DefaultCalculationMethod?
	';'
;

DefaultCalculationMethod:
	  ('default-value-constant' '=' defaultValueConstant=STRING)
	| ('default-value-calculator' '=' defaultValueCalculator=[TangDefaultValueCalculator|QualifiedName])
	| ('default-value-expression' '=' defaultValueExpression=STRING) // TODO: Change it to non String expression!
;

//------- Entity-view-native (Definition of View is maintained with SQL Code!!!)
TangEntityViewNative:
	'entity-view-native' name=ID 'db-view-name' '=' dbViewName=TableOrViewName
	OPEN
		'sql' '=' sql=STRING  // TODO - This is not good as we can't refactor SQL code!!!
	CLOSE
;


//------- Entity-view
TangEntityView:
	'entity-view' name=ID 'db-view-name' '=' dbViewName=TableOrViewName
	OPEN
		'entities' OPEN entities+=EntityViewAlias (',' entities+=EntityViewAlias)* CLOSE
		'fields'   OPEN fields+=EntityViewField (',' fields+=EntityViewField)* CLOSE
		'where'    OPEN where+=EntityViewWhere CLOSE
	CLOSE
;
EntityViewAlias:
	entity=[TangEntity] ('as'|'AS') name=ID
;
EntityViewField:
	aliasRef=[EntityViewAlias] '.' fieldRef=[Field] ('as'|'AS') name=ID
;
EntityViewWhere:
	left=[EntityViewField] '=' right=[EntityViewField]
;

//------- DefaultValueCalculatorList
TangDefaultValueCalculatorList:
	'default-value-calculators'
	OPEN
		defaultValueCalculators+=TangDefaultValueCalculator+
	CLOSE
;
TangDefaultValueCalculator:
	name=ID 'java-class' '=' className=STRING ';'
;

//------- DefaultValueCalculator[OLD VERSION]
TangDefaultValueCalculatorOld:
	'default-value-calculator' name=ID
	OPEN
		'java-class' '=' className=STRING
	CLOSE
;

//------- Window
TangWindow:
	'window' name=ID
	'human-name' '=' humanName=STRING
	('description' '=' description=STRING)?
	OPEN
		tabs+=Tab+
	CLOSE
;

Tab:
	'tab' name=ID 
	'human-name' '=' humanName=STRING 
	'entity-ref' '=' entity=[TangAbstractEntity|QualifiedName] 
	('level' '=' level=INT)?
	OPEN
		tabElements+=TabAbstractElement+
//		tabFields+=TabField+
	CLOSE
;

TabAbstractElement:
	Tab | TabField
;
TabField:
	name=ID 
	'field' '=' field=[Field|QualifiedName]
	'human-name' '=' humanName=STRING
	('position' '=' position=INT)?
	('description' '=' description=STRING)?
	';'
;
